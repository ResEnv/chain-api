{"name":"Chain-api","tagline":"RESTful sensor API","body":"Chain API\r\n=========\r\n\r\nNews\r\n----\r\n\r\nI presented ChainAPI at the Mobiquitous 2014 conference in London. You can\r\ndownload the paper published in the proceedings\r\n[here](http://responsive.media.mit.edu/wp-content/uploads/sites/5/2013/12/ChainAPI_Mobiquitous2014_camera-ready.pdf).\r\n\r\nSlides from my recent workshop at the MIT Media Lab are available here:\r\nhttp://ssfrr.github.io/ChainDinnerSpring2014/workshop_slides.html\r\n\r\nIntroduction\r\n------------\r\n\r\nChain API is a hypermedia HTTP API for working with sensor data. It includes an\r\nHTTP interface supporting request/response interactions, as well as a\r\nWebsockets streaming API for realtime \"push\" updates.\r\n\r\nThis project is led by [Spencer Russell][ssfrr], in the\r\n[Responsive Environments][resenv] group at the [MIT Media Lab][medialab]. It is\r\nstill relatively early stage and in development, and certainly not yet intended\r\nfor real production use. It is currently in use for the\r\n[Tidmarsh Living Observatory][tidmarsh] project.\r\n\r\nThe Chain API is built on top of the [Hypertext Application Language][hal],\r\nor HAL. Currently it only implements the application/hal+json MIME type.\r\nhal+json is relatively simple, and clients are free to ignore HAL and treat the\r\nresponses as regular JSON data. There are also various libraries that can\r\ntake advantage of the hal+json conventions to abstract some of the details\r\naway. For a more thorough spec of hal+json see [this IETF draft][hal-spec].\r\n\r\nWe'll start by describing the basic JSON payloads you should expect, but also\r\nbe sure to check out the API Concept Overview for more information on the\r\ncommon themes and design principles driving the API.\r\n\r\nEntry Point\r\n-----------\r\n\r\nThe API entry point is at http://chain-api.media.mit.edu. A `GET` request\r\nwill give you a link to the available sites.\r\n\r\n```json\r\n{\r\n  \"_links\": {\r\n    \"curies\": [\r\n      {\r\n        \"href\": \"http://chain-api.media.mit.edu/rels/{rel}\",\r\n        \"name\": \"ch\",\r\n        \"templated\": true\r\n      }\r\n    ],\r\n    \"self\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/\"\r\n    },\r\n    \"ch:sites\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sites/\",\r\n      \"title\": \"Sites\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nCurrently the only top-level resource available is the collection of Sites.\r\nThe client first selects which site they are interested in and can navigate\r\nfrom there to explore that site. Clients should not assume hard-coded URIs, but\r\nshould instead get the proper URI from the API entry point.\r\n\r\nBase Resource Types\r\n===================\r\n\r\nNOTE: At some point this information should be moved into the docstrings of\r\nthe resources themselves, so we can generate the documentation as well as the\r\ninformation at the rel URLs from the same info.\r\n\r\nSite\r\n----\r\n\r\nAn installation of Chain API, usually on the scale of several or many\r\nbuildings.\r\n\r\n### Resource Fields\r\n\r\n* `name` (string) - Name of this site\r\n* `geoLocation` (elevation, latitude, longitude) - The geographic location of\r\n  the site. All measurements are in meters.\r\n* `ch:devices` (related resource) - A collection of all the devices in this\r\n  site.  New devices can be POSTed to this collection to add them to this site.\r\n\r\n### Example\r\n\r\n```json\r\n{\r\n  \"geoLocation\": {\r\n    \"latitude\": 42.360624,\r\n    \"elevation\": null,\r\n    \"longitude\": -71.087577\r\n  },\r\n  \"_links\": {\r\n    \"ch:siteSummary\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sites/5/summary\",\r\n      \"title\": \"Summary\"\r\n    },\r\n    \"rawZMQStream\": {\r\n      \"href\": \"tcp://tidmarsh.media.mit.edu:1305\",\r\n      \"title\": \"Raw ZMQ Stream\"\r\n    },\r\n    \"ch:devices\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/devices/?site_id=5\",\r\n      \"title\": \"Devices\"\r\n    },\r\n    \"curies\": [\r\n      {\r\n        \"href\": \"http://chain-api.media.mit.edu/rels/{rel}\",\r\n        \"name\": \"ch\",\r\n        \"templated\": true\r\n      }\r\n    ],\r\n    \"self\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sites/5\"\r\n    },\r\n    \"ch:websocketStream\": {\r\n      \"href\": \"ws://chain-api.media.mit.edu/ws/site-5\",\r\n      \"title\": \"Websocket Stream\"\r\n    },\r\n    \"editForm\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sites/5/edit\",\r\n      \"title\": \"Edit Site\"\r\n    }\r\n  },\r\n  \"name\": \"MIT Media Lab\"\r\n}\r\n```\r\n\r\nDevice\r\n------\r\n\r\nA device that may contain several sensor channels.\r\n\r\n### Resource Fields\r\n\r\n* `name` (string) - Name of this device\r\n* `ch:site` (related resource) - The site this device is a part of\r\n* `description` (string) - A longer description of this device\r\n* `building` (string) - The building the device is in\r\n* `floor` (string) - The floor of the building\r\n* `room` (string) - The room containing the device\r\n* `ch:sensors` (related resource) - A collection of all the sensors in this\r\n  device. New sensors can be POSTed to this collection to add them to this\r\n  device.\r\n\r\n### Example\r\n\r\n```json\r\n{\r\n  \"building\": \"E14\",\r\n  \"room\": \"Cafe\",\r\n  \"floor\": \"5\",\r\n  \"description\": \"CityFarm Greenhouse (North)\",\r\n  \"_links\": {\r\n    \"ch:site\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sites/5\",\r\n      \"title\": \"MIT Media Lab\"\r\n    },\r\n    \"curies\": [\r\n      {\r\n        \"href\": \"http://chain-api.media.mit.edu/rels/{rel}\",\r\n        \"name\": \"ch\",\r\n        \"templated\": true\r\n      }\r\n    ],\r\n    \"self\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/devices/32\"\r\n    },\r\n    \"ch:websocketStream\": {\r\n      \"href\": \"ws://chain-api.media.mit.edu/ws/device-32\",\r\n      \"title\": \"Websocket Stream\"\r\n    },\r\n    \"ch:sensors\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sensors/?device_id=32\",\r\n      \"title\": \"Sensors\"\r\n    },\r\n    \"editForm\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/devices/32/edit\",\r\n      \"title\": \"Edit Device\"\r\n    }\r\n  },\r\n  \"name\": \"0x8123\"\r\n}\r\n```\r\n\r\nSensor\r\n------\r\n\r\nA sensor captures a single channel of data. There may be multiple sensors on a\r\nsingle device. Issuing a GET request for a Sensor resource also includes the\r\ncurrent value for that sensor. The value could be a scalar value or some other\r\nTBD data types.\r\n\r\n### Resource Fields\r\n\r\n* `ch:device` (related resource) - The device this sensor is part of\r\n* `ch:dataHistory` (related resource) - Collection of data from this sensor\r\n* `metric` (string) - What the sensor is measuring (e.g. \"temperature\")\r\n* `unit` (string) - The unit the data is in, e.g. \"kW-hr\". This should be an\r\n  abbreviation from the [QUDT unit list][qudt].\r\n* `dataType` (string) - Data type of this sensor. Currently there's only `float`\r\n* `updated` (ISO8601 timestamp) - Timestamp of the most recent update\r\n* `value` (various) - The most recent reading from this sensor. Currently only\r\n  floating point sensors are supported, but in the future this could be an xyz\r\n  position, GPS coordinate, image, etc.\r\n\r\n### Example\r\n\r\n```json\r\n{\r\n  \"updated\": \"2014-04-12T20:47:15.291305+00:00\",\r\n  \"dataType\": \"float\",\r\n  \"metric\": \"temperature\",\r\n  \"value\": 22.32,\r\n  \"_links\": {\r\n    \"ch:dataHistory\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sensordata/?sensor_id=263\",\r\n      \"title\": \"Data\"\r\n    },\r\n    \"curies\": [\r\n      {\r\n        \"href\": \"http://chain-api.media.mit.edu/rels/{rel}\",\r\n        \"name\": \"ch\",\r\n        \"templated\": true\r\n      }\r\n    ],\r\n    \"self\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sensors/263\"\r\n    },\r\n    \"ch:device\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/devices/32\",\r\n      \"title\": \"0x8123\"\r\n    },\r\n    \"ch:websocketStream\": {\r\n      \"href\": \"ws://chain-api.media.mit.edu/ws/sensor-263\",\r\n      \"title\": \"Websocket Stream\"\r\n    },\r\n    \"editForm\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sensors/263/edit\",\r\n      \"title\": \"Edit Sensor\"\r\n    }\r\n  },\r\n  \"unit\": \"celsius\"\r\n}\r\n```\r\n\r\nSensor Data\r\n-----------\r\n\r\nSensor Data is the raw data captured by the sensors. The `data` field is a list\r\ncontaining the actual data points. If necessary there are pagination links just\r\nlike collection resources. There is also a `createForm` link which gives the\r\nURL to post data to this data set.\r\n\r\n### Resource Fields\r\n\r\n* `dataType` (string) - The type of the data, currently always \"float\"\r\n* `data` (list) - List of data, each of which is a JSON object with at least\r\n  a `value` key and a `timestamp` key. The type of the `value` key is determined\r\n  by the `datatype` attribute\r\n* `totalCount` (int) - The total number of data points in the collection. If the\r\n  total count is too large a single response may only have one page of data\r\n\r\n### Example\r\n\r\n```json\r\n{\r\n  \"dataType\": \"float\",\r\n  \"totalCount\": 69148,\r\n  \"_links\": {\r\n    \"curies\": [\r\n      {\r\n        \"href\": \"http://chain-api.media.mit.edu/rels/{rel}\",\r\n        \"name\": \"ch\",\r\n        \"templated\": true\r\n      }\r\n    ],\r\n    \"self\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sensordata/?sensor_id=263\"\r\n    },\r\n    \"first\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sensordata/?sensor_id=263&limit=500&offset=0\",\r\n      \"title\": \"0 through 499\"\r\n    },\r\n    \"createForm\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sensordata/create?sensor_id=263\",\r\n      \"title\": \"Add Data\"\r\n    },\r\n    \"previous\": {\r\n      \"href\": \"http://chain-api.media.mit.edu/sensordata/?sensor_id=263&limit=500&offset=68148\",\r\n      \"title\": \"68148 through 68647\"\r\n    }\r\n  },\r\n  \"data\": [\r\n    {\r\n      \"timestamp\": \"2014-04-12T15:00:04.202361+00:00\",\r\n      \"value\": 29.81\r\n    },\r\n    {\r\n      \"timestamp\": \"2014-04-12T15:00:25.232755+00:00\",\r\n      \"value\": 29.82\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nGeneral API Concept Overview\r\n============================\r\n\r\nLink Relations\r\n--------------\r\n\r\nGiven a link from one resource to another, clients generally need to know what\r\nsort of relationship that link is modeling. Is it a link from a child to a\r\nparent? From a device to a list of contained sensors? These relations (often\r\nshortened to \"rels\") are central to the architecture of the Chain API, and\r\nhypermedia in general.\r\n\r\nNote that the `href` field in links will be a URL, which should be parsed\r\nas per [RFC1808][rfc1808]. Basically this means that URLs might be absolute\r\n(`http://example.com/things/392`) or relative to the domain (`/things/392`).\r\nRFC1808 also allows URLs to be expressed relative to the current resource\r\n(`../things/392`), but the Chain API does not use these.\r\n\r\nFollowing along with standard hal+json, most rels are self-documenting, and the\r\nrel itself actually serve as a link(URI) to the human-readable documentation\r\nthat describes what that relationship actually means. This rel URI should also\r\nbe used by clients as a unique, persistant identifier. This gives flexibility\r\nto server implementers as they can add new relation types, or even new versions\r\nof existing relation types, to existing resources without breaking older\r\nclients. As long as the new rels have unique URIs, old clients will simply\r\nignore them.\r\n\r\nSome relations are specific to the Chain API, in which case they are documented\r\non the Chain API site (currently chain-api.media.mit.edu). Where possible, the\r\nAPI uses [standard link rel names][rels-iana] in which case the rel names are\r\nnot qualified with a URI. See [RFC5988][rfc5988] for more info on link\r\nrelations.\r\n\r\nIn the Chain API attributes can also be considered relations, except the\r\nrelated object is simple data, instead of a linked or embedded resource. As\r\nsuch, attributes use the same self-documenting mechanism as resource relations.\r\n\r\nCURIES\r\n------\r\n\r\nUsing URIs as relation names has the benefit of providing a stable and unique\r\nidentifier for relation names, but using a full URI as a json dictionary key is\r\ncumbersome and duplicates lots of data in a typicaly payload. To alleviate this\r\nissue hal+json supports Compact URIs or \"CURIEs\". The\r\n[wikipedia page][curie-wiki] shows an example of a CURIE used as an XML\r\nnamespace, and the [w3c spec][curie-w3c] has a much more detailed description.\r\nIn the context of hal+json CURIEs are simply a URI template that can be used\r\nfor each rel that references it.\r\n\r\nEmbedded Relations\r\n------------------\r\n\r\nWhile links are the primary way to describe relationships between resources, it\r\nis sometimes cumbersome and inefficient to always request them separately. As\r\nan optimization, Chain API will sometimes embed the full related resource in\r\naddition to the link. In this case you will find the embedded resource in the\r\n`_embedded` section of the response, which is a hal+json standard. Note that in\r\nthis case the resource will still be linked in the `_links` section with the\r\nsame rel name, so clients can ignore the `_embedded` objects if they choose.\r\n\r\nCollection Resources\r\n--------------------\r\n\r\nSending an HTTP GET request to a Collection Resource will return a response\r\nwith the requested resources as well as metadata about the response, such as\r\nthe total number of resources represented by this collection.  If there are\r\nmore resources than will fit into a single response, there may also be links to\r\nthe first, last, previous, and next pages.\r\n\r\nRelated Collections\r\n-------------------\r\n\r\nWhen a resource has a related collection (e.g. a parent resource has a\r\n\"children\" relation), it will be represented with a collection resource.  The\r\nresource might have \"next\", \"previous\", or \"last\" links to handle pagination.\r\nIf the application can add items to the collection, it can have a `createForm`\r\nlink. See the section on forms for details.\r\n\r\nFor instance, the following parent resource has a `children` collection:\r\n\r\n```json\r\n{\r\n  \"_links\": {\r\n    \"self\": {\"href\": \"/parents/392\"},\r\n    \"children\": {\"href\": \"/parents/392/children/\"}\r\n  }\r\n}\r\n```\r\n\r\nwhich when followed gives you a full collection resource:\r\n\r\n```json\r\n{\r\n  \"_links\": {\r\n    \"self\": {\"href\": \"/parents/392/children/\"},\r\n    \"next\": { \"href\": \"/parents/392/children?page=2\", \"title\": \"Page 2\" },\r\n    \"last\": { \"href\": \"/parents/392/children?page=5\", \"title\": \"Page 5\" },\r\n    \"createForm\": { \"href\": \"/parents/392/children/\", \"title\": \"Create Order\"},\r\n    \"items\": [\r\n      {\"href\": \"/children/382\", \"title\": \"Child 1\"},\r\n      {\"href\": \"/children/8371\", \"title\": \"Child 2\"},\r\n      {\"href\": \"/children/716\", \"title\": \"Child 3\"}\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nRather than the collection only containing links to the items, it may include\r\nthe items themselves embedded within the response. If you are using a HAL\r\nclient (or chainclient), then it should handle both cases (linked or embedded)\r\ntransparently and your application code shouldn't need to care. An example\r\nwith embedded items would look like:\r\n\r\n```json\r\n{\r\n  \"_links\": {\r\n    \"self\": {\"href\": \"/parents/392/children/\"},\r\n    \"next\": { \"href\": \"/parents/392/children?page=2\", \"title\": \"Page 2\" },\r\n    \"last\": { \"href\": \"/parents/392/children?page=5\", \"title\": \"Page 5\" },\r\n    \"createForm\": { \"href\": \"/parents/392/children/\", \"title\": \"Create Order\"},\r\n    \"items\": [\r\n      {\"href\": \"/children/382\", \"title\": \"Child 1\"},\r\n      {\"href\": \"/children/8371\", \"title\": \"Child 2\"},\r\n      {\"href\": \"/children/716\", \"title\": \"Child 3\"}\r\n    ]\r\n  },\r\n  \"_embedded\": {\r\n    \"items\": [\r\n      {\r\n        \"_links\" {\r\n          \"self\": {\"href\": \"/children/382\"}\r\n        },\r\n        \"name\": \"Child 1\",\r\n        \"age\": 13\r\n      },\r\n      {\r\n        \"_links\" {\r\n          \"self\": {\"href\": \"/children/8371\"}\r\n        },\r\n        \"name\": \"Child 2\",\r\n        \"age\": 16\r\n      },\r\n      {\r\n        \"_links\" {\r\n          \"self\": {\"href\": \"/children/716\"}\r\n        },\r\n        \"name\": \"Child 3\",\r\n        \"age\": 31\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nhal+json Example\r\n----------------\r\n\r\nIssuing a GET to /orders might illicit the response:\r\n\r\n```json\r\n{\r\n  \"_links\": {\r\n    \"self\": { \"href\": \"/orders/\" },\r\n    \"next\": { \"href\": \"/orders?page=2\", \"title\": \"Page 2\" },\r\n    \"last\": { \"href\": \"/orders?page=5\", \"title\": \"Page 5\" },\r\n    \"createForm\": { \"href\": \"/orders/\", \"title\": \"Create Order\"},\r\n    \"curies\": [{\r\n        \"name\": \"rel\",\r\n        \"href\": \"http://docs.example.com/rels/{rel}\",\r\n        \"templated\": true\r\n    }],\r\n    \"items\": [\r\n        {\"href\": \"/orders/123\", \"title\": \"Christmas Order\"},\r\n        {\"href\": \"/orders/124\", \"title\": \"Birthday Order\"},\r\n    ]\r\n  },\r\n  \"_embedded\": {\r\n    \"items\": [\r\n    {\r\n      \"_links\": {\r\n        \"self\": { \"href\": \"/orders/123\" },\r\n        \"rel:basket\": { \"href\": \"/baskets/98712\" },\r\n        \"rel:customer\": { \"href\": \"/customers/7809\" }\r\n      },\r\n      \"name\": \"Christmas Order\",\r\n      \"total\": 30.00,\r\n      \"currency\": \"USD\",\r\n      \"status\": \"shipped\",\r\n    },\r\n    {\r\n      \"_links\": {\r\n        \"self\": { \"href\": \"/orders/124\" },\r\n        \"rel:basket\": { \"href\": \"/baskets/97213\" },\r\n        \"rel:customer\": { \"href\": \"/customers/12369\" }\r\n      },\r\n      \"name\": \"Birthday Order\",\r\n      \"total\": 20.00,\r\n      \"currency\": \"USD\",\r\n      \"status\": \"processing\"\r\n    }]\r\n  },\r\n  \"currentlyProcessing\": 14,\r\n  \"shippedToday\": 20\r\n}\r\n```\r\n\r\nSending a GET to the URI for a specific resource will return only that\r\nresource, e.g. GET /orders/123 might return:\r\n\r\n```json\r\n{\r\n  \"_links\": {\r\n    \"self\": { \"href\": \"/orders/123\" },\r\n    \"rel:basket\": { \"href\": \"/baskets/98712\" },\r\n    \"rel:customer\": { \"href\": \"/customers/7809\" }\r\n    \"curies\": [{\r\n        \"name\": \"rel\",\r\n        \"href\": \"http://docs.example.org/rels/{rel}\",\r\n        \"templated\": true\r\n    }]\r\n  },\r\n  \"rel:total\": 30.00,\r\n  \"rel:currency\": \"USD\",\r\n  \"rel:status\": \"shipped\",\r\n}\r\n```\r\n\r\nPosting Data\r\n------------\r\n\r\nYou'll see in the above collection payload a `createForm` rel, which is a link\r\nthat you can use to add new elements to the collection. Issuing a GET request\r\nto the `createForm` link will return a document in [JSON-schema][json-schema]\r\nformat that tells the client what format the resource should take. POSTing to\r\nthe link in the proper format will create a new resource and will return it\r\nwith an HTTP 201 Created status.\r\n\r\nEditing Data\r\n------------\r\n\r\nWhen the client is able to edit a resource, there will be an `editForm` rel.\r\nAs with `createForm`, sending a GET request to this URL will return a\r\n[JSON-schema][json-schema] document. The default values given in the schema are\r\nthe current vaues for the resource being edited. POSTing to the URL with the\r\nupdated JSON data will update the resource.\r\n\r\nDetails on the `createForm` and `editForm` rels can be found in\r\n[RFC6861][rfc6861]. Note that, following JSON conventions and to make things\r\neasier on clients, we have modified the standard hyphonated rel names to\r\ncamelCase.\r\n\r\nWebsockets Streaming API\r\n------------------------\r\n\r\nMany applications are interested in the latest data as it comes in. For these\r\napplications constantly polling is a drain on both the client and server, so\r\nthis API implements a streaming interface via [Websockets][websockets]. For\r\nmany resources you will find a `ch:websocketStream` link that you can follow\r\nwith any websocket-capable browser or client application. Once the websocket\r\nconnection is established the server will send HAL+JSON-formatted updates that\r\ntypically are the same as what you would receive in a GET response. Streams for\r\nsome resources will also include \"contained\" resources. For instance,\r\nsubscribing to the stream for a Site resource might also include all the\r\ndevices in that site, and even all the sensors in those devices.\r\n\r\nTypically clients will start by synching their current state using the HTTP\r\nAPI, and maintain a hash that maps resource URLs to the client's internal\r\nrepresentation. After subscribing to a stream, clients can match incoming\r\nresource descriptions by using the `self` link as the key into the hash.\r\n\r\n\r\nDev Server Initial Setup\r\n========================\r\n\r\nTo develop for Chain API the best way is with a virtual machine. The following\r\ninstructions should guide you through setting up a development environment that\r\nshould match the production machine.\r\n\r\nFirst you'll want to make sure that both Virtualbox and Vagrant are installed,\r\nas well as git.\r\n\r\nThen clone the code from the repository with:\r\n\r\n    git clone https://github.com/ssfrr/chain-api.git\r\n\r\nGit will create a folder called chain-api and check out the code into\r\nit.\r\n\r\nfrom within that folder run \"vagrant up\" and it should instantiate the virtual\r\nmachine.\r\n\r\nafter the machine is up you can run \"vagrant ssh\" to ssh into the new VM. From\r\nthere you can follow the below instructions on setting up a Chain API server.\r\n\r\nChain API Server Setup Instructions\r\n===================================\r\n\r\nCurrently Chain API is supported on Ubuntu Precise (12.04 LTS)\r\nInstall dependencies with manifest.sh\r\n\r\n    cd chain-api/\r\n    sudo chmod +x ./manifest.sh\r\n    sudo ./manifest.sh\r\n\r\nNOTE FOR ARCH:\r\n\r\nThe puppet manifest doesn't work well on Arch, so just install the python\r\npackages with pip system packages with pacman that are listed in the manifest,\r\nand comment those stanzas out.  I also had to set the ownership of\r\n/var/lib/postgres with:\r\n\r\n    sudo chown -R postgres:users /var/lib/postgres\r\n\r\nEND OF ARCH-SPECIFIC NOTE\r\n\r\n### Setup Postgres\r\n\r\n    sudo su - postgres\r\n    createuser --pwprompt <POSTGRES USERNAME>\r\n\r\nafter creating a new user, you can create the postgres db like so:\r\n\r\n    createdb chain\r\n\r\n\r\n\r\nCopy `localsettings_template.py` into a new file called `localsettings.py`, setting\r\nthe username and password, as well as the `SECRET_KEY`. You can generate an\r\nappropriate secret key in python with:\r\n\r\n    import random\r\n    ''.join([random.SystemRandom().\r\n        choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)')\r\n        for i in range(50)])\r\n\r\nBefore continuing, ensure that the `build-essential` package for Ubuntu is installed.  If\r\nnot (or if you are unsure), install it by running:\r\n\r\n    sudo apt-get install build-essential\r\n\r\nCheck to make sure `libzmq-dev` is not installed.  The version of ZMQ found in the apt repository\r\nis below the minimum required version for ChainAPI.  ChainAPI will install the correct version,\r\nbut only if ZMQ is not already installed on the system.  If it is installed, you can uninstall it with\r\n\r\n    sudo apt-get remove libzmq-dev\r\n\r\nThen install python dependencies like so:\r\n\r\n    ./setup.py develop\r\n\r\nNow you can initialise your django environment\r\n\r\n    ./manage.py syncdb\r\n    ./manage.py migrate\r\n\r\nNow you should be able to run the server with:\r\n\r\n    ./manage.py runserver 0.0.0.0:8000\r\n\r\nand access it from your host machine's browser at\r\n\r\n    http://localhost:8000/admin\r\n\r\nDev Server Vagrant Box Setup\r\n---------------------------\r\nAn alternative method to quickly start developing with chain-api on Ubuntu 12.04 Wheezy64 Vagrant Box\r\n\r\n    curl -o package.box http://phive-yogurt.mit.edu/chain-ubuntu1404.box\r\n    vagrant box add chain-box package.box\r\n    vagrant init chain-box\r\n    vagrant up\r\n    vagrant ssh\r\n\r\ndefault postgres username/password:\r\n\r\n    username: yoda\r\n    password: 123\r\n\r\ndefault http username/password:\r\n\r\n    username: yoda\r\n    password: 123\r\n\r\nMake sure to change the username/password and edit localsettings.py\r\n\r\nSupervisor and Nginx are setup to run automatically, but you will have to run the following first.\r\n\r\n    cd /vagrant\r\n    sudo su - postgres -c 'psql -c \"ALTER USER yoda WITH SUPERUSER;\"'\r\n    sudo ./setup.py develop\r\n    sudo ./manage.py migrate\r\n    sudo chmod -R g+wx-s /usr/local /srv\r\n    sudo chmod -R a+r /usr/local\r\n\r\nThen restart supervisor and nginx:\r\n\r\n    sudo /etc/init.d/supervisor stop\r\n    sudo /etc/init.d/supervisor start\r\n    sudo /etc/init.d/nginx restart\r\n\r\n\r\nSetting up for Production\r\n-------------------------\r\n\r\nWhile the above steps should be fine for development, there are a few more\r\nthings you need to do for a production machine.\r\n\r\nFirst make sure whatever user will be deploying is in the \"staff\" group. This will\r\nallow us to autodeploy without needing root permissions.\r\n\r\n    sudo usermod -aG staff USERNAME\r\n    sudo chown -R root:staff /usr/local /srv\r\n    sudo chmod -R g+wx-s /usr/local /srv\r\n    sudo chmod -R a+r /usr/local\r\n\r\nBefore continuing, ensure that the `build-essential` package for Ubuntu is installed.  If\r\nnot (or if you are unsure), install it by running:\r\n\r\n    sudo apt-get install build-essential\r\n\r\nCheck to make sure `libzmq-dev` is not installed.  The version of ZMQ found in the apt repository\r\nis below the minimum required version for ChainAPI.  ChainAPI will install the correct version,\r\nbut only if ZMQ is not already installed on the system.  If it is installed, you can uninstall it with\r\n\r\n    sudo apt-get remove libzmq-dev\r\n\r\nFirst install the django app to your system python install by running\r\n\r\n    ./setup.py develop\r\n\r\nThis will install the app as a system package, so you don't need to hard-code\r\npaths.\r\n\r\nNOTE - the package is installed WITHOUT root permissions. This is\r\nimportant because if we install with root permissions the first time then we'll\r\nneed root permission on every subsequent time.\r\n\r\nThen copy the system config files\r\n\r\n    sudo cp -R system/* /\r\n\r\nAnd enable the HTTP interface to supervisor by adding the following code to\r\nthe configuration at /etc/supervisor/supervisord.conf (setting the username\r\nand password to whatever you want them to be)\r\n\r\n    [inet_http_server]\r\n    port=*:9001\r\n    user=username\r\n    password=password\r\n\r\nWe also need to change the permissions so that anyone in the \"staff\" group can\r\nmanage supervisor tasks.\r\n\r\n    [unix_http_server]\r\n    file=/var/run/supervisor.sock\r\n    chmod=0770\r\n    chown=nobody:staff\r\n\r\nNow create the htpasswd file that will determine the usernames and passwords\r\nthat will be allowed to POST to your ChainAPI Instance:\r\n\r\n    sudo htpasswd -c /var/www/mywebsite.com/.htpasswd exampleuser\r\n\r\nand edit /etc/nginx/sites-available/chain.conf to add the path to your\r\n.htpasswd file where it says `PATH/TO/HTPASSWD`.\r\n\r\nNext, copy the static files (CSS, JS, static HTML, etc.) to the\r\nwebserver's static folder by running\r\n\r\n    ./manage.py collectstatic\r\n\r\nNow you can restart supervisord and nginx to pick up the config changes. Note\r\nthat supervisor restart doesn't work, so it must be stopped and started.\r\n\r\n    sudo /etc/init.d/supervisor stop\r\n    sudo /etc/init.d/supervisor start\r\n    sudo /etc/init.d/nginx restart\r\n\r\nDeploy Hooks\r\n------------\r\n\r\nIn the \"hooks\" directory you'll find a post-receive hook that should be copied\r\n(or symlinked) into the .git/hooks directory of your deployed server. You'll also\r\nneed to run\r\n\r\n    git config receive.denyCurrentBranch ignore\r\n\r\nTo allow pushes to the checked-out branch.\r\n\r\nOn your development machine you should now be able to set up the deployment server as a\r\ngit remote\r\n\r\n    git remote add production ssh://deployuser@yourserver.com/deployed/repo/dir\r\n\r\nthen whenever you have a version to push to production just:\r\n\r\n    git push production\r\n\r\n\r\n\r\n[ssfrr]: http://ssfrr.com\r\n[resenv]: http://resenv.media.mit.edu\r\n[medialab]: http://media.mit.edu\r\n[tidmarsh]: http://tidmarsh.media.mit.edu\r\n[hal]: http://stateless.co/hal_specification.html\r\n[hal-spec]: http://tools.ietf.org/html/draft-kelly-json-hal-06\r\n[rfc6861]: http://tools.ietf.org/html/rfc6861\r\n[rfc5988]: http://tools.ietf.org/html/rfc5988\r\n[rfc1808]: http://tools.ietf.org/html/rfc1808\r\n[curie-w3c]: http://www.w3.org/TR/curie/\r\n[curie-wiki]: http://en.wikipedia.org/wiki/CURIE\r\n[rels-iana]: http://www.iana.org/assignments/link-relations/link-relations.xhtml\r\n[qudt]: http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html\r\n[json-schema]: http://json-schema.org/examples.html\r\n[websockets]: http://en.wikipedia.org/wiki/WebSocket\r\n","google":"UA-2114450-6","note":"Don't delete this file! It's used internally to help with page regeneration."}