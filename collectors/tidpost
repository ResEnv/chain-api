#!/usr/bin/env python

'''tidpost

Listens to all tidmarsh data and posts it to the given site URL using the
chain-api REST protocol. The ZMQ address is retreived from the server's
representation in the chain API.

Usage:
    tidpost <chain_url>

    <chain_url>: URL for the site to post to
'''

from docopt import docopt
import zmq
import chainclient
import json
import datetime
import logging
import coloredlogs
import time
from chain.settings import COLLECTOR_AUTH

logger = logging.getLogger(__name__)
coloredlogs.install(level=logging.INFO)
# disable debug logging in the requests module, it's a bit noisy
logging.getLogger('requests').setLevel(logging.WARNING)


class TidmarshReceiver:
    def __init__(self, address):
        self.zmq_ctx = zmq.Context()
        self.subscriber = self.zmq_ctx.socket(zmq.SUB)
        self.subscriber.connect(address)
        self.subscriber.setsockopt(zmq.SUBSCRIBE, "")

    def recv(self):
        return self.subscriber.recv()


# the sensors don't self-describe their units, so we map them here. Note that
# the charge_flags are unpacked
TIDMARSH_UNITS = {
    "sht_humidity": "percent",
    "bmp_pressure": "hPa",
    "battery_voltage": "volts",
    "illuminance": "lux",
    "sht_temperature": "celsius",
    "bmp_temperature": "celsius",
    "charge_flags_fault": "boolean",
    "charge_flags_charge": "boolean",
    "accel_x": "m/s^2",
    "accel_y": "m/s^2",
    "accel_z": "m/s^2",
    "analog": "ADC units"
}


def main():
    opts = docopt(__doc__)
    site_url = opts['<chain_url>']

    site = chainclient.get(site_url, auth=COLLECTOR_AUTH)
    logger.debug("Got Site: %s" % site)

    tidsense_url = site.links.rawZMQStream.href
    logger.info("Connecting to TidSense stream at %s" % tidsense_url)
    r = TidmarshReceiver(tidsense_url)

    devices_coll = site.rels['ch:devices']
    existing_devices = get_api_device_dict(devices_coll)

    while True:
        dev_json = json.loads(r.recv())
        logger.info("Received: %s" % dev_json)
        dev_name = dev_json['src']
        # the src field is mapped to the device name and used as a key
        try:
            dev = existing_devices[dev_name]
        except KeyError:
            logger.info("Creating device %s" % dev_name)
            dev = devices_coll.create({'name': dev_name}, auth=COLLECTOR_AUTH)
            existing_devices[dev_name] = dev
        post_sensor_data(dev_json, dev)


def get_api_device_dict(devices_coll):
    '''Requests all the devices from the tidmarsh site and builds a dictionary
    keyed on the device name, so that as new data comes in we can quickly look
    up the corresponding device and post the sensor data'''

    devices_dict = {}

    for device in devices_coll.rels['items']:
        devices_dict[device.name] = device

    return devices_dict


def find_sensor_by_metric(sensor_list, metric):
    '''Finds the matching sensor in a device's sensor list. Throws KeyError if
    there is no matching sensor'''
    for sensor in sensor_list:
        if sensor['metric'] == metric:
            return sensor
    raise KeyError('"%s" not found' % metric)


def post_sensor_data(report_data, device, prefix=''):
#        Example data where "src" is the device name, and the rest are
#        sensor Metrics.
#
#        {
#            "src": "0x8110",
#            "via": "0x0000",
#            "sht_humidity": 15.9,
#            "bmp_pressure": 911.62,
#            "battery_voltage": 4.62,
#            "illuminance": 413,
#            "sht_temperature": 25.32,
#            "charge_flags": {
#                "fault": false,
#                "charge": false
#            },
#            "bmp_temperature": 54.6
#        }

    now = datetime.datetime.utcnow()
    sensor_data = {
        # add the "+00:00" to mark the time as UTC
        'timestamp': now.isoformat() + "+00:00"
    }

    for metric, data in report_data.items():
        if metric in ['src', 'via']:
            # skip these ones
            continue
        if metric == 'charge_flags':
            # treat this sub dict as its own set of data for this device
            post_sensor_data(data, device, 'charge_flags_')
            continue

        # at this point we assume data is a plain value to post
        server_metric = prefix + metric

        try:
            unit = TIDMARSH_UNITS[server_metric]
        except KeyError:
            unit = metric + ' units'

        # TODO: handle possible change in units
        sensors_coll = device.rels['ch:sensors']
        try:
            sensor = find_sensor_by_metric(sensors_coll.rels['items'],
                                           server_metric)
        except KeyError:
            sensor = sensors_coll.create(
                {'metric': server_metric, 'unit': unit}, auth=COLLECTOR_AUTH)
        history = sensor.rels['ch:dataHistory']

        sensor_data['value'] = data
        logger.info("Posting %s data: %s" % (server_metric, sensor_data))
        history.create(sensor_data, cache=False, auth=COLLECTOR_AUTH)


if __name__ == '__main__':
    # keep retrying if the connection fails, in case this script comes up
    # before the server does or the server goes down for some reason
    while True:
        try:
            main()
        except chainclient.ConnectionError as e:
            logger.warning("Failed to connect to Chain API: %s" % e)
            time.sleep(5)
